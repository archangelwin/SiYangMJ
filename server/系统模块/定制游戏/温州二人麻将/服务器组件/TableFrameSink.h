#ifndef TABLE_FRAME_SINK_HEAD_FILE
#define TABLE_FRAME_SINK_HEAD_FILE

#pragma once

#include "Stdafx.h"
#include "AfxTempl.h"
#include "GameLogic.h"
#include "math.h"
#include "HistoryScore.h"
#include "ServerControl.h"

//////////////////////////////////////////////////////////////////////////////////
//效验类型
enum enEstimatKind
{
  EstimatKind_OutCard,      //出牌效验
  EstimatKind_GangCard,     //杠牌效验
};
//游戏桌子
class CTableFrameSink : public ITableFrameSink, public ITableUserAction
{
  //游戏变量
protected:
  LONG              m_lSiceCount;             //骰子点数
  WORD              m_wBankerUser;              //庄家用户
  LONGLONG            m_lGameScore[GAME_PLAYER];        //游戏得分
  BYTE              m_cbCardIndex[GAME_PLAYER][MAX_INDEX];  //用户扑克
  bool              m_bTrustee[GAME_PLAYER];        //是否托管
  BYTE              m_cbListenStatus[GAME_PLAYER];      //听牌状态
  BYTE              m_cbQuanFeng;             //圈风
  BYTE              m_cbQuanCounter;            //圈风计数
  BYTE              m_cbLianZhuangCount;          //连庄计数
  WORD              m_wReplaceUser;             //补牌用户
  bool              m_bTianDiHu[GAME_PLAYER];       //天胡状态
  bool              m_bTuoPai[GAME_PLAYER];         //脱牌状态
  BYTE              m_bMaiDi[GAME_PLAYER];          //买底状态 (0 没买 1 买一 2 买二 other 错误)
  bool              m_bHaveMaiDi[GAME_PLAYER];        //是否买过

  //出牌信息
protected:
  WORD              m_wOutCardUser;             //出牌用户
  BYTE              m_cbOutCardData;            //出牌扑克
  BYTE              m_cbOutCardCount;           //出牌数目
  BYTE              m_cbDiscardCount[GAME_PLAYER];      //丢弃数目
  BYTE              m_cbDiscardCard[GAME_PLAYER][60];   //丢弃记录

  //发牌信息
protected:
  BYTE              m_cbSendCardData;           //发牌扑克
  BYTE              m_cbSendCardCount;            //发牌数目
  BYTE              m_cbLeftCardCount;            //剩余数目
  BYTE              m_cbRepertoryCard[MAX_REPERTORY];   //库存扑克
  BYTE              m_cbEndLeftCount;           //荒庄牌数

  //堆立变量
protected:
  WORD              m_wHeapHead;              //堆立头部
  WORD              m_wHeapTail;              //堆立尾部
  BYTE              m_cbHeapCardInfo[4][2];         //堆牌信息

  //财神变量
protected:
  BYTE              m_bMagicIndex;              //财神牌值
  WORD              m_wMagicPos;              //财神方位
  BYTE              m_cbHeapMagic;              //财神堆位  (从尾部数起）

  //运行变量
protected:
  WORD              m_wResumeUser;              //还原用户
  WORD              m_wCurrentUser;             //当前用户
  WORD              m_wProvideUser;             //供应用户
  BYTE              m_cbProvideCard;            //供应扑克

  //状态变量
protected:
  bool              m_bSendStatus;              //发牌状态
  bool              m_bGangStatus;              //抢杆状态
  bool              m_bEnjoinChiHu[GAME_PLAYER];      //禁止吃胡
  bool              m_bEnjoinChiPeng[GAME_PLAYER];      //禁止吃碰

  //用户状态
public:
  bool              m_bResponse[GAME_PLAYER];       //响应标志
  BYTE              m_cbUserAction[GAME_PLAYER];      //用户动作
  BYTE              m_cbOperateCard[GAME_PLAYER][3];    //操作扑克
  BYTE              m_cbPerformAction[GAME_PLAYER];     //执行动作

  //组合扑克
protected:
  BYTE              m_cbWeaveItemCount[GAME_PLAYER];      //组合数目
  tagWeaveItem          m_WeaveItemArray[GAME_PLAYER][MAX_WEAVE]; //组合扑克

  //结束信息
protected:
  BYTE              m_cbChiHuCard;              //吃胡扑克
  DWORD             m_dwChiHuKind[GAME_PLAYER];       //吃胡结果
  CChiHuRight           m_ChiHuRight[GAME_PLAYER];        //吃胡权位

  //组件变量
protected:
  CGameLogic            m_GameLogic;              //游戏逻辑
  ITableFrame           * m_pITableFrame;           //框架接口
  const tagGameServiceOption    * m_pGameServiceOption;         //配置参数

  //服务控制
protected:
  HINSTANCE           m_hControlInst;
  IServerControl*         m_pServerControl;

  //属性变量
protected:
  static const WORD       m_wPlayerCount;             //游戏人数

  //函数定义
public:
  //构造函数
  CTableFrameSink();
  //析构函数
  virtual ~CTableFrameSink();

  //基础接口
public:
  //释放对象
  virtual VOID Release()
  {
    delete this;
  }
  //接口查询
  virtual VOID * QueryInterface(REFGUID Guid, DWORD dwQueryVer);
  //比赛接口
public:
  //设置基数
  virtual void SetGameBaseScore(LONG lBaseScore) {};

  //管理接口
public:
  //初始化
  virtual bool Initialization(IUnknownEx * pIUnknownEx);
  //复位桌子
  virtual VOID RepositionSink();

  //查询是否扣服务费
  virtual bool QueryBuckleServiceCharge(WORD wChairID)
  {
    return true;
  }

  //游戏事件
public:
  //游戏开始
  virtual bool OnEventGameStart();
  //游戏结束
  virtual bool OnEventGameConclude(WORD wChairID, IServerUserItem * pIServerUserItem, BYTE cbReason);
  //发送场景
  virtual bool OnEventSendGameScene(WORD wChairID, IServerUserItem * pIServerUserItem, BYTE cbGameStatus, bool bSendSecret);

  //事件接口
public:
  //时间事件
  virtual bool OnTimerMessage(DWORD wTimerID, WPARAM wBindParam);
  //游戏消息
  virtual bool OnGameMessage(WORD wSubCmdID, VOID * pData, WORD wDataSize, IServerUserItem * pIServerUserItem);
  //框架消息
  virtual bool OnFrameMessage(WORD wSubCmdID, VOID * pData, WORD wDataSize, IServerUserItem * pIServerUserItem);

  //用户事件
public:
  //用户断线
  virtual bool OnActionUserOffLine(WORD wChairID,IServerUserItem * pIServerUserItem)
  {
    return true;
  }
  //用户重入
  virtual bool OnActionUserConnect(WORD wChairID,IServerUserItem * pIServerUserItem)
  {
    return true;
  }
  //用户坐下
  virtual bool OnActionUserSitDown(WORD wChairID,IServerUserItem * pIServerUserItem, bool bLookonUser);
  //用户起立
  virtual bool OnActionUserStandUp(WORD wChairID,IServerUserItem * pIServerUserItem, bool bLookonUser);
  //用户同意
  virtual bool OnActionUserOnReady(WORD wChairID,IServerUserItem * pIServerUserItem, VOID * pData, WORD wDataSize)
  {
    return true;
  }
  //查询接口
public:
  //查询限额
  virtual SCORE QueryConsumeQuota(IServerUserItem * pIServerUserItem)
  {
    return 0;
  }
  //最少积分
  virtual SCORE QueryLessEnterScore(WORD wChairID, IServerUserItem * pIServerUserItem)
  {
    return 0;
  }
  //数据事件
  virtual bool OnDataBaseMessage(WORD wRequestID, VOID * pData, WORD wDataSize)
  {
    return false;
  }
  //积分事件
  virtual bool OnUserScroeNotify(WORD wChairID, IServerUserItem * pIServerUserItem, BYTE cbReason)
  {
    return false;
  }
  //游戏事件
protected:
  //用户听牌
  bool OnUserListenCard(WORD wChairID,BYTE cbListen);
  //用户出牌
  bool OnUserOutCard(WORD wChairID, BYTE cbCardData);
  //用户操作
  bool OnUserOperateCard(WORD wChairID, BYTE cbOperateCode, BYTE cbOperateCard[3]);
  //用户补牌
  bool OnUserReplaceCard(WORD wChairID, BYTE cbCardData);
  //用户买底
  bool OnUserChip(WORD wChairID, BYTE cbMaidi);

  //辅助函数
protected:
  //发送操作
  bool SendOperateNotify();
  //派发扑克
  bool DispatchCardData(WORD wCurrentUser,bool bTail=false);
  //响应判断
  bool EstimateUserRespond(WORD wCenterUser, BYTE cbCenterCard, enEstimatKind EstimatKind);
  //算分
  BYTE CalScore(WORD wWinner, WORD wBanker, LONGLONG lScore[GAME_PLAYER]);
  //从系统翻牌获取钻牌索引
  BYTE GetMagicIndex(BYTE cbFanCard);
  //获取桌面牌数
  BYTE GetDiscardCount(BYTE cbCardData);
  //权位过滤
  void FiltrateRight(WORD wWinner, CChiHuRight &chr);
  //状态检查
  bool IsAllState(bool bState[GAME_PLAYER], WORD wIgnorePos = INVALID_CHAIR, bool bCheckTrue = true);
  //是否双包
  bool IsBaoUser(WORD wUserFir, WORD wUserSec);
  //作弊用户
  bool OnCheatCard(IServerUserItem * pIServerUserItem);
  //发送作弊信息
  void SendCheatCard();
};

//////////////////////////////////////////////////////////////////////////////////

#endif